https://leetcode.com/problems/find-the-duplicate-number/

Optimized Solution:
Time Compexity : O(n)
Space Complexity : O(1)

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int fast=nums[0],slow=nums[0];
        
       do {
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(fast!=slow);
        slow=nums[0];
        while(slow!=fast)
        {
            slow=nums[slow];
            fast=nums[fast];
        }
        return fast;
    }
};

General Solution:
Time Complexity : O(nlogn)
Space Complexity : O(1)

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n;
        for(int i=0;i<nums.size()-1;i++)
        {
            if(nums[i]==nums[i+1])
            {    n= nums[i];
             break;
            }
        }
        return n;
    }
};
